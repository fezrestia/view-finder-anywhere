apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// Add for FireBase.
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

import java.util.regex.Pattern

android {
    namespace 'com.fezrestia.android.viewfinderanywhere'
    compileSdk 33

    defaultConfig {
        applicationId "com.fezrestia.android.viewfinderanywhere"
        minSdkVersion 29
        targetSdk 33

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_TOOLCHAIN=clang"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            debuggable true
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
    }

    tasks.register('incrementVersionCode') {
        def file = file("src/main/AndroidManifest.xml")
        def text = file.getText()

        // Update version code.
        def codePattern = Pattern.compile("android:versionCode=\"(\\d+)\"")
        def codeMatcher = codePattern.matcher(text)
        codeMatcher.find()
        def code = Integer.parseInt(codeMatcher.group(1))
        def newCode = code + 1
        def codeUpdatedText = codeMatcher.replaceAll("android:versionCode=\"" + newCode + "\"")

        // Update version name.
        def namePattern = Pattern.compile("android:versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)-\\d+\"")
        def nameMatcher = namePattern.matcher(codeUpdatedText)
        nameMatcher.find()
        def major = Integer.parseInt(nameMatcher.group(1))
        def minor = Integer.parseInt(nameMatcher.group(2))
        def patch = Integer.parseInt(nameMatcher.group(3))
        def newName = "android:versionName=\"" + major + "." + minor + "." + patch + "-" + newCode + "\""
        def nameUpdatedText = nameMatcher.replaceAll(newName)

        file.write(nameUpdatedText)
    }

    tasks.configureEach { task ->
        if (task.name == "generateReleaseBuildConfig" || task.name == "generateDebugBuildConfig") {
            task.dependsOn("incrementVersionCode")
        }
    }

    // Define APK name and replace.
    applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            if (output.outputFileName.endsWith(".apk")) {
                def name = getArchivesBaseName()
                def ver = variant.versionName

                switch (variant.name) {
                    case "debug":
                        // NOP.
                        break

                    case "release":
                        output.outputFileName = "${name}_${ver}.apk"
                        break
                }
            }
        }
    }

    productFlavors {
    }

    externalNativeBuild {
        cmake {
            version "3.18.1"
            path file("src/main/cpp/CMakeLists.txt")
        }
    }

    ndkVersion '25.2.9519653'

    lint {
        htmlOutput file("$project.buildDir/reports/test-results-lint.html")
        lintConfig file('lint.xml')
        xmlOutput file("$project.buildDir/reports/test-results-lint.xml")
    }
}

dependencies {
    // FireBase.
    implementation 'com.google.firebase:firebase-analytics-ktx:21.3.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.4.0'

    // Kotlin support.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.21'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.8.21'

    // Google play services.
    implementation 'com.google.android.gms:play-services-location:21.0.1'

    // Android X
    implementation 'androidx.exifinterface:exifinterface:1.3.6'
}
